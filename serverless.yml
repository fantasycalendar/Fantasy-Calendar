service: fantasy-calendar

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-1
    # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
    stage: ${opt:stage, 'dev'}
    runtime: provided
    environment:
      APP_KEY: ${ssm:/${self:custom.ssm.${self:custom.stage}}/app_key}
      APP_DEBUG: ${self:custom.environment.${self:custom.stage}.APP_DEBUG}
      AWS_BUCKET: # environment variable for Laravel
        Ref: Assets
      SQS_QUEUE:
        Ref: AlertQueue
      DB_HOST: ${ssm:/${self:custom.ssm.${self:custom.stage}}/db_host}
      DB_PORT: 3306
      DB_USERNAME: ${ssm:/${self:custom.ssm.${self:custom.stage}}/db_username}
      DB_PASSWORD: ${ssm:/${self:custom.ssm.${self:custom.stage}}/db_password}
      DB_DATABASE: ${ssm:/${self:custom.ssm.${self:custom.stage}}/db_name}
      VIEW_COMPILED_PATH: /tmp/storage/framework/views
      PURIFIER_CACHE_PATH: /tmp/purifier
      FILESYSTEM_DRIVER_PUBLIC: s3
      FILESYSTEM_DRIVER: s3
      MIX_ASSET_URL: https://${self:custom.alias}
      ASSET_URL: https://${self:custom.alias}
      APP_URL: https://${self:custom.alias}
      WEBADDRESS: ${self:custom.alias}
      COOKIEADDRESS: ${self:custom.alias}
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      REDIS_HOST: ${ssm:/${self:custom.ssm.${self:custom.stage}}/redis_host}
      REDIS_PORT: 6379
      MAIL_DRIVER: smtp
      MAIL_HOST: ${ssm:/${self:custom.ssm.${self:custom.stage}}/mail_host}
      MAIL_PORT: 587
      MAIL_USERNAME: ${ssm:/${self:custom.ssm.${self:custom.stage}}/mail_username}
      MAIL_PASSWORD: ${ssm:/${self:custom.ssm.${self:custom.stage}}/mail_password}
      MAIL_FROM_ADDRESS: ${ssm:/${self:custom.ssm.${self:custom.stage}}/mail_from}
      MAIL_FROM_NAME: Fantasy Calendar
      MAIL_ENCRYPTION: tls
      STRIPE_KEY: ${ssm:/${self:custom.ssm.${self:custom.stage}}/stripe-key}
      STRIPE_SECRET: ${ssm:/${self:custom.ssm.${self:custom.stage}}/stripe-secret}
    iamRoleStatements:
      # Allow Lambda to read and write files in the S3 buckets
      -   Effect: Allow
          Action: s3:*
          Resource:
            - Fn::GetAtt: Assets.Arn # the storage bucket
            - Fn::Join: ['', [Fn::GetAtt: Assets.Arn, '/*']] # everything in the storage bucket
      -   Effect: "Allow"
          Action:
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DetachNetworkInterface"
            - "ec2:DeleteNetworkInterface"
            - "ses:Publish"
            - "ses:SendEmail"
          Resource: "*"
      -   Effect: Allow
          Action: [sqs:SendMessage, sqs:DeleteMessage]
          Resource:
            Fn::GetAtt: [ AlertQueue, Arn ]

custom:
  stage: ${opt:stage, 'dev'}
  alias: ${self:custom.domain.${self:custom.stage}}
  domain:
    prod: 'lambda.fantasy-calendar.com'
    dev: 'lambda-dev.fantasy-calendar.com'
  environment:
    prod:
      APP_DEBUG: 'false'
    dev:
      APP_DEBUG: 'true'
  ssm:
    prod: 'fantasy-calendar'
    dev: 'fantasy-calendar-dev'
  s3Sync:
    # A simple configuration for copying static assets
    - bucketNameKey: AssetsOutputKey
      localDir: public # required
      deleteRemoved: true

package:
    exclude:
        - node_modules/**
        - public/storage
        - resources/assets/**
        - storage/**
        - tests/**

functions:
    # This function runs the Laravel website/API
    web:
        handler: public/index.php
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-74-fpm}
        events:
            -   http: 'ANY /'
            -   http: 'ANY /{proxy+}'
        vpc:
          securityGroupIds: { 'Fn::Split': [",", "${ssm:/${self:custom.ssm.${self:custom.stage}}/security_group_ids}"] }
          subnetIds: { 'Fn::Split': [",", "${ssm:/${self:custom.ssm.${self:custom.stage}}/subnet_ids}"] }
    # This function lets us run artisan commands on lambda
    artisan:
        handler: artisan
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-74} # PHP
            - ${bref:layer.console} # The "console" layer
        vpc:
          securityGroupIds: { 'Fn::Split': [",", "${ssm:/${self:custom.ssm.${self:custom.stage}}/security_group_ids}"] }
          subnetIds: { 'Fn::Split': [",", "${ssm:/${self:custom.ssm.${self:custom.stage}}/subnet_ids}"] }
    worker:
      handler: worker.php
      layers:
        - ${bref:layer.php-73}
      events:
        -   sqs:
              arn:
                Fn::GetAtt: [ AlertQueue, Arn ]
              batchSize: 1
    hostforward:
      handler: setup/lambda/${opt:stage, 'dev'}/forwarder.handler
      runtime: nodejs12.x
      package:
        individually: true
        exclude:
          - "./**"
        include:
          - setup/lambda/${opt:stage, 'dev'}/forwarder.js
      memorySize: 128
      events:
        -   cloudFront:
              eventType: origin-request
              origin: Website

plugins:
    # We need to include the Bref plugin
    - ./vendor/bref/bref
    - serverless-s3-sync

resources:
  Resources:
    # The S3 bucket that stores the assets
    Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: fantasy-calendar-${opt:stage, 'dev'}
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    # The policy that makes the bucket publicly readable
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Assets # References the bucket we defined above
        PolicyDocument:
          Statement:
            -   Effect: Allow
                Principal: '*' # everyone
                Action: 's3:GetObject' # to read
                Resource: !Join ['/', [!GetAtt Assets.Arn, '*']] # things in the bucket
              # alternatively you can write out Resource: 'arn:aws:s3:::<bucket-name>/*'
    # The queue
    AlertQueue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy:
          maxReceiveCount: 3 # jobs will be retried up to 3 times
          # Failed jobs (after the retries) will be moved to the other queue for storage
          deadLetterTargetArn:
            Fn::GetAtt: [ DeadLetterQueue, Arn ]
    # Failed jobs will go into that SQS queue to be stored, until a developer looks at these errors
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 1209600 # maximum retention: 14 days
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
          PriceClass: PriceClass_100
          # Enable http2 transfer for better performances
          HttpVersion: http2
          # Origins are where CloudFront fetches content
          Origins:
            # The website (AWS Lambda)
            - Id: Website
              DomainName: !Join ['.', [!Ref ApiGatewayRestApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
              # This is the stage
              OriginPath: "/${opt:stage, 'dev'}"
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only' # API Gateway only supports HTTPS
            # The assets (S3)
            - Id: Assets
              DomainName: !GetAtt Assets.RegionalDomainName
              S3OriginConfig: {} # this key is required to tell CloudFront that this is an S3 origin, even though nothing is configured
            # If you host a static website, like a SPA, use s3-website URLs instead of the config above
            # See https://stackoverflow.com/questions/15309113/amazon-cloudfront-doesnt-respect-my-s3-website-buckets-index-html-rules#15528757
            # DomainName: !Select [2, !Split ["/", !GetAtt Assets.WebsiteURL]]
            # CustomOriginConfig:
            #     OriginProtocolPolicy: 'http-only' # S3 websites only support HTTP
            # You'll also need to enable website hosting on your s3 bucket by configuring the WebsiteConfiguration property
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#cfn-s3-bucket-websiteconfiguration
          # The default behavior is to send everything to AWS Lambda
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            TargetOriginId: Website # the PHP application
            # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all # Forward cookies to use them in PHP
              # We must *not* forward the `Host` header else it messes up API Gateway
              Headers:
                - 'Accept'
                - 'Accept-Language'
                - 'Origin'
                - 'Referer'
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            - PathPattern: '/vendor/sharp/lang.js'
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
              TargetOriginId: Website # the PHP application
              # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
              DefaultTTL: 0
              MinTTL: 0
              MaxTTL: 0
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
              ForwardedValues:
                QueryString: true
                Cookies:
                  Forward: all # Forward cookies to use them in PHP
                # We must *not* forward the `Host` header else it messes up API Gateway
                Headers:
                  - 'Accept'
                  - 'Accept-Language'
                  - 'Origin'
                  - 'Referer'
              ViewerProtocolPolicy: redirect-to-https
            # Assets will be served under the `/assets/` prefix
            - PathPattern: 'favicon.ico'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'robots.txt'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'css/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'fonts/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'images/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'js/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'policies/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'resources/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: 'vendor/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
          CustomErrorResponses:
            # Do not cache HTTP errors
            - ErrorCode: 500
              ErrorCachingMinTTL: 0
            - ErrorCode: 504
              ErrorCachingMinTTL: 0
          Aliases:
            - ${self:custom.alias}
          ViewerCertificate:
            # ARN of the certificate created in ACM
            AcmCertificateArn: arn:aws:acm:us-east-1:187933545528:certificate/ec7b5304-fd5f-421a-b4da-c9fbf9742508
            # See https://docs.aws.amazon.com/fr_fr/cloudfront/latest/APIReference/API_ViewerCertificate.html
            SslSupportMethod: 'sni-only'
            MinimumProtocolVersion: TLSv1.1_2016
    WebsiteDNSName:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: 'Z073956536B27M25YFZT6' # Taken from the AWS Console
        RecordSets:
          - Name: ${self:custom.alias}
            Type: A
            AliasTarget:
                HostedZoneId: Z2FDTNDATAQYW2
                DNSName: !GetAtt [CloudFrontDistribution, DomainName]
                EvaluateTargetHealth: false
  Outputs:
    AssetsOutputKey:
      Value: !Ref Assets
